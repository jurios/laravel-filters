<?php

namespace Kodilab\LaravelFilters\Tests\Unit;

use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Request;
use Kodilab\LaravelFilters\QueryFilter;
use Kodilab\LaravelFilters\Tests\Resources\TestModels\TestModel;
use Kodilab\LaravelFilters\Tests\TestCase;

class QueryFilterTest extends TestCase
{
    use WithFaker;

    /** @var Request $request */
    protected $request;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->request = \Illuminate\Support\Facades\Request::instance();
    }

    public function test_filters_are_accesible_as_attributes()
    {
        $filter_name = $this->faker->unique()->word;
        $filter_value = $this->faker->unique()->numberBetween();

        $filters = new QueryFilter($this->request);

        $this->assertNull($filters->$filter_name);

        $this->request->merge([$filter_name => $filter_value]);
        $filters = new QueryFilter($this->request);

        $this->assertEquals($filters->$filter_name, $filter_value);

        $filter_name = $this->faker->unique()->word;
        $this->assertNull($filters->$filter_name);
    }

    public function test_default_filter()
    {
        $filter_name = 'id';
        $filter_value = $this->faker->unique()->numberBetween();
        $this->request->merge([$filter_name => $filter_value]);

        $filters = new QueryFilter($this->request);

        $this->assertStringContainsString("where \"id\" = ?", TestModel::filters($filters)->toSql());
    }

    public function test_default_filter_not_applied_if_the_field_does_not_exist()
    {
        $filter_name = $this->faker->unique()->word;
        $filter_value = $this->faker->unique()->numberBetween();
        $this->request->merge([$filter_name => $filter_value]);

        $filters = new QueryFilter($this->request);

        $this->assertStringNotContainsString("where \"id\" = ?", TestModel::filters($filters)->toSql());
    }

    public function test_order_by()
    {
        $filter_name = 'order_desc';
        $filter_value = 'id';

        $this->request->merge([$filter_name => $filter_value]);

        $filters = new QueryFilter($this->request);

        $this->assertStringContainsString("order by \"id\" desc", TestModel::filters($filters)->toSql());
    }

    public function test_order_by_only_works_for_existing_fields()
    {
        $filter_name = 'order_desc';
        $filter_value = $this->faker->unique()->word;

        $this->request->merge([$filter_name => $filter_value]);

        $filters = new QueryFilter($this->request);

        $this->assertStringNotContainsString("order by \"id\" desc", TestModel::filters($filters)->toSql());
    }
}